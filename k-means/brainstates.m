function y = brainstates(datastruct)
    %this function computes the k-means of dynamic wSMI
    %matrices generated by dynamic-wsmi. 

    %datastruct must be a struct with the following fields:
    %import_path: path for extracting the mat files
    %export_path: path for exporting the clustering result
    %k: number of centroids
    %distance: type of distance (euclidian, cityblock, etc)
    %replicates: number of replicates
    %subsample_factor: a positive integer n will keep
    %1 every n windows and drop the rest
    %n_windows: number of windows in your data
    %n_channels: number of channels in your data

    import_path = datastruct.import_path;
    export_path = datastruct.export_path;
    centroids = datastruct.k;
    distance = datastruct.distance;
    replicates = datastruct.replicates;
    subsampling = datastruct.subsample_factor;
    n_windows = datastruct.n_windows;
    n_channels = datastruct.n_channels;

    files = dir(strcat(import_path, '/*.mat'));
    filenames = {files(:).name};
    
    dataset = zeros(n_windows*length(filenames), n_channels*n_channels);
    for i=1:length(filenames)
       display(strcat('Processing ...', filenames{i}))
       
       load(strcat(import_path, '/', filenames{i}), 'data');
       datanew = reshape(data, n_windows, n_channels*n_channels);
        
       dataset((i-1)*n_windows+1:i*n_windows, :) = datanew;
    end
    
    dataset = dataset(1:subsampling:end, :);
    
    [~, C] = kmeans(dataset, centroids, 'Distance', distance, 'Replicates', replicates, 'MaxIter', 200, 'Display', 'final');
    output_name = strcat(export_path, '/centroids.mat');
    save(char(output_name), 'C');
    y = output_name;
    
end